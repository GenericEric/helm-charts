apiVersion: apps/v1
kind: Deployment
metadata:
  name:  {{ .Values.appName }}
  namespace: {{ .Values.namespace }}
  labels:
    app:  {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app:  {{ .Values.appName }}
    spec:
      runtimeClassName: nvidia
      containers:
      - name:  {{ .Values.appName }}
        image:  "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        env:
        - name: TZ
          value: "{{ .Values.env.TZ }}"
        - name: LC_ALL
          value: "{{ .Values.env.LC_ALL }}"
        - name: LANG
          value: "{{ .Values.env.LANG }}"
        - name: PUID
          value: "{{ .Values.env.PUID }}"
        - name: PGID
          value: "{{ .Values.env.PGID }}"
        - name: NVIDIA_VISIBLE_DEVICES
          value: nvidia.com/gpu=all
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: all
        ports:
        - containerPort:  {{ .Values.service.port }}
          name:  {{ .Values.appName }}
        volumeMounts:
        - name: config
          mountPath: {{ .Values.persistence.config.mountPath }}
        - name: data
          mountPath: {{ .Values.persistence.data.mountPath }}
{{ if .Values.watchedSync.enabled }}
      - name: watched-sync
        image:  "{{ .Values.watchedSync.image.repository }}:{{ .Values.watchedSync.image.tag }}"
        imagePullPolicy: {{ .Values.watchedSync.image.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.watchedSync.resources.requests.cpu }}
            memory: {{ .Values.watchedSync.resources.requests.memory }}
          limits:
            cpu: {{ .Values.watchedSync.resources.limits.cpu }}
            memory: {{ .Values.watchedSync.resources.limits.memory }}
        env:
        - name: TZ
          value: "{{ .Values.env.TZ }}"
        - name: LC_ALL
          value: "{{ .Values.env.LC_ALL }}"
        - name: LANG
          value: "{{ .Values.env.LANG }}"
        - name: PUID
          value: "{{ .Values.env.PUID }}"
        - name: PGID
          value: "{{ .Values.env.PGID }}"
        - name: DRYRUN
          value: "{{ .Values.watchedSync.env.DRYRUN }}"
        - name: RUN_ONLY_ONCE
          value: "{{ .Values.watchedSync.env.RUN_ONLY_ONCE }}"
        - name: SLEEP_DURATION
          value: "{{ .Values.watchedSync.env.SLEEP_DURATION }}"
        - name: REQUEST_TIMEOUT
          value: "{{ .Values.watchedSync.env.REQUEST_TIMEOUT }}"
        - name: GENERATE_GUIDS
          value: "{{ .Values.watchedSync.env.GENERATE_GUIDS }}"
        - name: GENERATE_LOCATIONS
          value: "{{ .Values.watchedSync.env.GENERATE_LOCATIONS }}"
        - name: MAX_THREADS
          value: "{{ .Values.watchedSync.env.MAX_THREADS }}"
        - name: WHITELIST_USERS
          value: "{{ .Values.watchedSync.env.WHITELIST_USERS }}"
        - name: JELLYFIN_BASEURL
          value: "{{ .Values.watchedSync.env.JELLYFIN_BASEURL }}"
        - name: JELLYFIN_TOKEN
          value: "{{ .Values.watchedSync.env.JELLYFIN_TOKEN }}"
        - name: SYNC_FROM_JELLYFIN_TO_JELLYFIN
          value: "{{ .Values.watchedSync.env.SYNC_FROM_JELLYFIN_TO_JELLYFIN }}"
        - name: SSL_BYPASS
          value: "{{ .Values.watchedSync.env.SSL_BYPASS }}"
{{ end }}
      volumes:
        - name: config
          hostPath:
            path: {{ .Values.persistence.config.hostPath }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.data.existingClaim }}
      restartPolicy: Always